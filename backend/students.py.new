"""
Student API endpoints for managing student data, groups, and face embeddings
"""
from flask import Blueprint, request, jsonify, current_app
from werkzeug.utils import secure_filename
from app.models.student import Student
from app.models.group import Group
from app import db
from app.services.face_service import FaceService
from app.services.drive_service import DriveService
from app.utils.auth import admin_required
import os
import uuid
import tempfile
import io
import csv
import cv2
import numpy as np

student_bp = Blueprint('students', __name__)
face_service = FaceService()
drive_service = DriveService()

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg'}
           
def allowed_bulk_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in {'csv'}

# Get all students
@student_bp.route('/', methods=['GET'])
@admin_required()
def get_all_students():
    """Get all students"""
    try:
        students = Student.query.all()
        return jsonify({"students": [student.to_dict() for student in students]}), 200
    except Exception as e:
        current_app.logger.error(f"Error fetching all students: {str(e)}")
        return jsonify({"error": "An unexpected error occurred"}), 500

# Register a new student (legacy API)
@student_bp.route('/register', methods=['POST'])
@admin_required()
def register_student():
    """Register a new student with photo"""
    try:
        # Check if the request has the required fields
        if 'student_id' not in request.form or 'name' not in request.form:
            return jsonify({"error": "Missing required fields"}), 400
            
        student_id = request.form['student_id']
        name = request.form['name']
        
        # Check if student already exists
        existing_student = Student.query.filter_by(student_id=student_id).first()
        if existing_student:
            return jsonify({"error": f"Student with ID {student_id} already exists"}), 409
            
        # Create new student with basic info first
        new_student = Student(
            student_id=student_id,
            name=name,
            group_id=None,  # No group for direct registration
            photo_path=None
        )
        
        # Handle image file if present
        if 'image' in request.files:
            file = request.files['image']
            if file and allowed_file(file.filename):
                # Generate a unique filename with UUID
                filename = f"{student_id}_{str(uuid.uuid4())}.jpg"
                filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
                
                # Save the file
                file.save(filepath)
                
                # Update photo path
                new_student.photo_path = filepath
                
                # Process face embedding
                try:
                    # Read the image
                    img = cv2.imread(filepath)
                    if img is None:
                        current_app.logger.warning(f"Failed to read image file for student {student_id}")
                    else:
                        # Detect face and get embedding
                        bbox, embedding = face_service.detect_and_embed_face(img)
                        
                        if embedding is None:
                            current_app.logger.warning(f"No face detected in image for student {student_id}")
                        else:
                            # Store the embedding with the student
                            new_student.set_embedding(embedding)
                except Exception as e:
                    current_app.logger.error(f"Error processing face: {str(e)}")
                    # Continue without embedding - it's nullable now
        
        # Handle Drive link if present
        elif 'drive_link' in request.form and request.form['drive_link']:
            drive_link = request.form['drive_link']
            
            try:
                # Download image from drive and process
                temp_filepath = drive_service.download_file(drive_link)
                
                # Generate a unique filename with UUID
                filename = f"{student_id}_{str(uuid.uuid4())}.jpg"
                filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
                
                # Copy the temp file to uploads
                import shutil
                shutil.copy(temp_filepath, filepath)
                
                # Clean up temp file
                os.remove(temp_filepath)
                
                # Update photo path
                new_student.photo_path = filepath
                
                # Process face embedding
                try:
                    # Read the image
                    img = cv2.imread(filepath)
                    if img is None:
                        current_app.logger.warning(f"Failed to read image file from Drive for student {student_id}")
                    else:
                        # Detect face and get embedding
                        bbox, embedding = face_service.detect_and_embed_face(img)
                        
                        if embedding is None:
                            current_app.logger.warning(f"No face detected in image from Drive for student {student_id}")
                        else:
                            # Store the embedding with the student
                            new_student.set_embedding(embedding)
                except Exception as e:
                    current_app.logger.error(f"Error processing face from Drive: {str(e)}")
                    # Continue without embedding - it's nullable now
            except Exception as e:
                current_app.logger.error(f"Error downloading from drive: {str(e)}")
                return jsonify({"error": "Could not process image from Drive link"}), 400
        
        # Save the student to the database
        db.session.add(new_student)
        db.session.commit()
        
        return jsonify({"message": "Student registered successfully", "student": new_student.to_dict()}), 201
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error registering student: {str(e)}")
        import traceback
        tb = traceback.format_exc()
        current_app.logger.error(tb)
        
        # Provide more specific error messages based on the exception
        if 'duplicate key' in str(e).lower():
            return jsonify({"error": f"Student with ID {student_id} already exists"}), 409
        elif 'drive' in str(e).lower() or 'google' in str(e).lower():
            return jsonify({"error": f"Google Drive error: {str(e)}. Try uploading a local image instead."}), 400
        elif 'permission' in str(e).lower():
            return jsonify({"error": "Permission error with Google Drive. Make sure the file is shared with the service account."}), 403
        elif 'not found' in str(e).lower() or '404' in str(e):
            return jsonify({"error": "File not found on Google Drive. Check the link and try again."}), 404
        elif 'file' in str(e).lower() or 'directory' in str(e).lower():
            return jsonify({"error": f"File system error: {str(e)}. Check if uploads directory exists and is writable."}), 500
        else:
            return jsonify({
                "error": "An unexpected error occurred",
                "details": str(e)
            }), 500

# Delete a student
@student_bp.route('/<string:student_id>', methods=['DELETE'])
@admin_required()
def delete_student(student_id):
    """Delete a student by ID"""
    try:
        # Log the request
        current_app.logger.info(f"Deleting student with ID: {student_id}")
        
        # Find the student
        student = Student.query.get(student_id)
        if not student:
            current_app.logger.warning(f"Student with ID {student_id} not found")
            return jsonify({"error": f"Student with ID {student_id} not found"}), 404
        
        # Delete the student's photo if it exists
        if student.photo_path and os.path.exists(student.photo_path):
            try:
                os.remove(student.photo_path)
                current_app.logger.info(f"Deleted photo file: {student.photo_path}")
            except Exception as e:
                current_app.logger.warning(f"Could not delete photo file: {str(e)}")
                # Continue with deletion even if photo can't be removed
        
        # Delete the student from the database
        db.session.delete(student)
        db.session.commit()
        
        current_app.logger.info(f"Successfully deleted student with ID: {student_id}")
        return jsonify({"message": f"Student with ID {student_id} has been deleted"}), 200
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error deleting student: {str(e)}")
        import traceback
        tb = traceback.format_exc()
        current_app.logger.error(tb)
        return jsonify({"error": "An unexpected error occurred", "details": str(e)}), 500